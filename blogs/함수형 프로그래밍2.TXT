> _본 글은 2018년 GOTO conference에서 Russ Olsen이 발표한 'Functional Programming in 40 Minutes' 의 강연 내용을 제가 이해한 내용을 바탕으로 재구성한 것입니다._


> ### 읽으면 좋은 분들
2년 경력 미만의 프로그래머 분들
객체지향 프로그래밍에 익숙한 분들 - _대부분의 강연 내용이 객체지향 프로그래밍을 예로 들면서 비교하며 진행됩니다._
함수형 프로그래밍에 대한 지식이 없는 분들
함수형 프로그래밍을 실용적인 관점에서 간략하게 이해하고 싶은 분들


## 객체지향 프로그램이 뭐가 문제길래, 함수형으로 프로그래밍을 해야하나요?
이전 포스트에서 함수형 프로그래밍으로 프로그램을 짠다는 것이 어떤 의미인지를 알아보았습니다. 
그런데, 객체지향 프로그래밍의 어떤 부분이 아쉬워서 함수형 프로그래밍으로 짜야 하는 걸까요? 
세상 사물을 객체로 인식하는 우리 입장에서는 프로그램도 그에 맞게 객체로 인식해서 짜는 게 훨씬 자연스럽고 수월한 일이 될 텐데요, 왜 굳이 그렇게까지 해야 할까요?

이번에는 이 주제에 대해 알아보겠습니다.

좀 더 와닿게 이해하기 위해서는 구체적인 예시를 드는 것이 좋겠죠. 
객체지향으로 어떤 공공시설의 예약시스템 어플리케이션을 짰다고 가정해 보겠습니다. 

### 깔끔한 객체지향적 프로그램 구조도 

가장 먼저 해야 할 일은 의뢰인의 어플리케이션 기획의 스펙에 맞게 전체적인 구조를 잡는 일입니다. 먼저 '예약 서비스'나 '가입자' 등을 객체지향에 대응시켜서 인터페이스, 추상 클래스 및 상속되는 클래스를 만들고, 가입자가 예약시스템에 예약을 신청하는 등의 메서드를 만들고, 각 객체의 디펜던시를 알아보기 쉽도록 구성하여 다음과 같이 깔끔한 구조의 어플리케이션을 만들었다고 해 보죠.

![](https://images.velog.io/images/dev-mish-mash/post/fef1234b-58c9-4f86-9cd4-3871df3bcf33/image.png)

그럴듯한 어플리케이션이 완성되었습니다! 실제로 잘 동작하고 의뢰인으로부터의 반응도 좋네요. 만족스럽습니다.

### 새로운 기능의 추가 
그런데, 이번에는 의뢰인이 가입하지 않은 사용자도 예약을 할 수 있도록 기능을 추가해 달라고 요청했습니다. 처음 예상에는 없던 일이지만 '가입자' 클래스 대신 '임시 사용자' 클래스를 만들고, 임시 사용자도 예약을 할 수 있도록 다른 모듈도 추가하여 기능을 완성했습니다. 아직까지는 깔끔합니다!

![](https://images.velog.io/images/dev-mish-mash/post/5486bdb4-2555-43ec-a6cf-d2642c5ed5dc/image.png)

### 기능의 삭제
원래 예약 시스템에는 가입자의 정보에 따라 예약 우선순위가 결정되었는데, 이것이 형평성에 어긋나서 전부 선착순으로 바꿔달라고 의뢰인이 요청했습니다. 예약 우선순위를 산출하는 모듈이 예약시스템에 큰 부분을 차지했기 때문에 이를 제거하면 어플리케이션 구조가 좀 일그러지긴 하지만, 어쨌든 요청사항이니 그렇게 모듈을 빼고 정상 동작하도록 바꾸었습니다. 

![](https://images.velog.io/images/dev-mish-mash/post/89a0c76d-d5db-4727-b594-3b464277a87a/image.png)

### 이상적이지 않은 디펜던시의 추가
이제는 특정 가입자가 예약을 독점하고 있는 터라, 시설물을 독점하지 못하도록 새로운 규칙이 추가되어야 합니다. 하지만, 이러한 규칙을 전혀 예상하지 못하고 제작된 지금 구조로는 기존 디펜던시를 그대로 유지하면서 규칙을 추가할 수가 없습니다. 안타깝지만 이상적이지 않은 디펜던시가 추가되기 시작합니다. **이러한 비이상적 디펜던시는 예상하지 못한 순간에 다른 인스턴스에 대한 정보를 변경하기 때문에, 구조를 망치고 버그가 발생했을 때 원인을 추적하기 어렵게 된다는 것을 알지만 현재 구조에서는 다른 방법이 없습니다.**
그러면서 저는 이런 생각을 하기 시작합니다. 
'이러라고 만든 애가 아니었는데....'

![](https://images.velog.io/images/dev-mish-mash/post/d8a6eb11-9a34-47cc-8e50-0bfd5355d2d2/image.png)

### 돌아가긴 하는데....
그리고, 시간이 지나 이러한 일들이 반복되면 다음과 같은 '돌아가긴 하는데... 좀 그런' 어플리케이션이 됩니다. 
<li>돌아가긴 하는데... 단순한 버그임에도 엄청난 시간을 들여 고쳐야 하는</li>
<li>돌아가긴 하는데... 원인 불명의 어려운 버그가 나오는</li>
<li>그렇게 버그를 고쳤는데, 하나를 고치니 다른 버그 2개가 터지는</li>
<li>기본적으로 간단히 동작하지만 조건이 다르면 엄청 복잡하게 작동하는</li>

전혀 이상적인 일이 아닙니다.
하지만, 이러한 일은 사실 너무 비일비재합니다.

![](https://images.velog.io/images/dev-mish-mash/post/3173a8a7-00aa-4ec5-9d5f-c79dab163bb7/image.png)

### 어떻게 고치지?

새로운 구조로 다시 리팩토링을 하면 이러한 일을 해결할 수 있을 것처럼 보입니다. 하지만, 다시 구조를 잘 짜서 프로그램을 만든다 하더라도 똑같은 일이 다시 발생할 것은 불 보듯 뻔한 일인데 어떻게 해결할 수 있을까요?

으음, 혹시 ~~저의 짧은 경력 때문~~ 선견지명이 부족해서 그런 걸까요? 추가적으로 예상되는 기능들을 잘 분간해서 유연하게 구조를 구성하지 못했기 때문인것도 같습니다. 

하지만 비이상적인 디펜던시를 추가하는 경우였던, 예약시스템의 순서를 선착순으로 바꾸는 일은 전혀 예상하지 못했었는데, 앞으로도 이런 경우에는 어쩔 수 없이 설계 => 수정 => 리팩토링을 반복해야 하는걸까요?

백번 양보해서 제 문제가 훨씬 많겠지만, 이게 혹시 객체지향적 프로그래밍 자체도 어느 정도의 문제가 있는게 아닐까요?

이런 생각이 들 즈음에 다행스럽게도, 강연자인 Russ Oslen은 다음과 같이 말했습니다.

> 객체지향 프로그래밍은 좀 지저분한(messy) 경향이 있다. 우리는 아마도 새로운 프로그래밍 패러다임이 필요하다. 


이제 무엇이 문제인지 파악했습니다. 제 부족한 프로그래밍 스킬은 일단 제외하고, **객체 지향 자체가 기존 기능의 변화나 혹은 새로운 기능의 추가에 유연성 있는 유지 보수가 어려워 보입니다.**

### 다음 주제

그러면, 객체지향 대신 함수형으로 패러다임을 바꿔서 짜면 이런 문제들을 해결 할 수 있다는 말이겠죠.

다음 포스팅에서는 함수형 프로그래밍의 구성 요소에 대해 알아보고, 그 다음에 어떤 식으로 이 문제를 해결할 수 있는지에 대해 작성하도록 하겠습니다.

#### 출처 : https://www.youtube.com/watch?v=0if71HOyVjY