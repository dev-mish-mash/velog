> _본 글은 2018년 GOTO conference에서 Russ Olsen이 발표한 'Functional Programming in 40 Minutes' 의 강연 내용을 제가 이해한 내용을 바탕으로 재구성한 것입니다._


> ### 읽으면 좋은 분들
2년 경력 미만의 프로그래머 분들
객체지향 프로그래밍에 익숙한 분들 - _대부분의 강연 내용이 객체지향 프로그래밍을 예로 들면서 비교하며 진행됩니다._
함수형 프로그래밍에 대한 지식이 없는 분들
함수형 프로그래밍을 실용적인 관점에서 간략하게 이해하고 싶은 분들


## 함수형 프로그래밍을 한다는 것은 구체적으로 무엇일까?
함수형 프로그래밍이란 말을 처음 접할때, 저는 무언가 굉장히 크고 이해하기 어려운 개념처럼 느껴졌습니다. 마치 이야기 속 미지의 흑막과 같다고 할까요? 하지만 이 강연을 따라 구체적으로 하나 하나씩 파고들어가 보니 그 크기만 했던 그림자가 걷히고 좀 더 선명해지면서 '음, 그래도 뭔가 할 수 있겠는데?' 정도의 느낌으로 변했습니다.

물론 이 강연 하나를 듣고 함수형 프로그래밍을 깊이 알게 되는 것은 아닙니다만, 적어도 함수형 프로그래밍이라는 배경 지식을 어떻게 내 머리속에 정리해놔야 하는지는 확실히 알아갈 수 있을 것입니다.

그리고 지금부터 여러분께 그 과정을 공유해 보려 합니다. 

저는 구체적으로 예를 드는게 이해가 가장 빠르더군요. 따라서 예시를 들어보겠습니다.

먼저, 우리가 객체지향형으로 프로그램을 작성한다고 가정해 보고, 이에 대해 가지고 있는 지식들을 생각해봅시다. 

가장 먼저 생각나는 기초 단계로는

<li>변수(variable)</li>
<li>변수의 할당</li> 
<li>조건문(if, while)</li> 
<li>반복문(iteration) </li> 

정도가 있을 것입니다. 여기서 좀 더 나아가서 그 윗 단계는
<li>기본 자료 구조(string, number, boolean, ...)</li>
<li>자료 구조 (stack, queue, linked list, hash, ...)</li> 

같은 내용들이 있을 것이고, 코드 구성을 헷갈리지 않게 도와주는 namespace 개념이나 좀 더 범위를 넓혀 보면 프로그램을 이해하기 쉽도록 '들여쓰기(indentation)' 하는 것도 프로그래밍의 지식의 일종이라고 볼 수 있을 겁니다.

여기서 우리에게 친숙한 객체지향의 개념들을 사용한다면 그 윗 단계로 

<li> 클래스(class)</li> 
<li> 상속(inheritance)</li>
<li> 메서드(method)</li>

등이 있을 것이고, 최종적으로 아래 그림처럼 이 개념들을 차곡차곡 잘 쌓아서 프로그램을 완성할 수 있겠죠.

### 일반적인 객체지향형 프로그램의 구조

![](https://images.velog.io/images/dev-mish-mash/post/378cd9c4-f286-4b34-b1cf-60475733d7a5/image.png)


### 함수형으로 바꾸려면?

그럼, 여기서 이렇게 짜여진 프로그램을 함수형으로 바꾼다고 하면 어느 부분을 바꾸는 것일까요? 여기 있는 모든 구성 요소들을 갈아 엎어야 할까요? 

그렇진 않을 겁니다. 여러분도 예상하셨다시피, 객체지향의 개념들이 있는 이 빨간색 박스 부분만을 어떤 함수형 구성요소로 바꿔서 프로그램을 작성하면 웬지 잘 돌아갈 것 처럼 보이죠. 

![](https://images.velog.io/images/dev-mish-mash/post/fe6fcd07-3821-4123-9a30-dc1d57c1c270/image.png)

그림을 유심히 보다보면 또 하나 주목할 만한 점이 있습니다. 생각보다 바뀌는 부분이 크지 않죠.

물론 저 그림에는 3개의 블럭만 바꾸면 되니까 그렇게 느껴질 수 있지만, **중요한 점은 프로그램을 만드는데 기초가 되는 밑의 3줄의 기본 구성 요소들은 그대로 가지고 프로그램을 작성해도 문제 될 것이 없다는 점입니다.**

이 강연의 발표자인 Russ Olsen을 말을 인용하여 결론을 짓자면,

> 함수형으로 프로그램을 짠다는 것은, 당신이 **이미 알고 있는 프로그래밍 개념과 기술들을 그대로 가지고 프로그래밍을 하는 방법만을 함수형으로 리팩토링(refactoring)** 하는 것이다.

라고 할 수 있겠습니다.


### 다음 주제 
이제 우리가 객체지향형 대신 함수형으로 프로그램을 작성하기 위해 알아야 할 것이 구체적으로 정해집니다.
<ol>
  <li>객체지향형 구성 요소를 대체할 함수형 구성 요소에는 어떤 것들이 있는지</li>
  <li>그 구성 요소를 활용해서 어떻게 함수형으로 프로그램을 작성할 것인지</li>
</ol>

하지만 그 전에, 우리가 뭐가 아쉬워서 객체지향적으로 짠 프로그램을 함수형으로 바꾸어야 할까요? 
객체지향으로 잘 짜면 함수형으로 바꿀 이유도 없는 것 아닐까요?

다음 포스트에서는 **우리가 객체지향 프로그래밍 대신 함수형 프로그래밍으로 짜야 하는 이유**에 대해 알아보겠습니다.



#### 출처 : https://www.youtube.com/watch?v=0if71HOyVjY